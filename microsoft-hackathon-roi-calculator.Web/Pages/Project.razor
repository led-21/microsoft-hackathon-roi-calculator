@page "/projects"
@using microsoft_hackathon_roi_calculator.Web.Pages.Components;

@inject HttpClient Http
@inject IToastService ToastService
@inject IDialogService DialogService

<h3>Projetos</h3>
<FluentCard Height="auto" Style="margin: 1rem;">
    <!-- Acordeão para filtros-->
    <FluentAccordion>
        <FluentAccordionItem Heading="Filter(s)" Expanded="false">
            <FluentIcon Value="@(new Icons.Regular.Size20.FilterAdd())"
                        Color="@Color.Neutral"
                        Slot="start" />
            <FluentGrid Spacing="1"
                        Justify="Microsoft.FluentUI.AspNetCore.Components.JustifyContent.FlexStart"
                        Style="padding: 5px;">
                <FluentGridItem xs="12" sm="6" md="4">
                    <FluentTextField @bind-Value="_projectName"
                                     Label="Nome do Projeto" />
                </FluentGridItem>
            </FluentGrid>

            <!-- Botões do filtro -->
            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal"
                         HorizontalAlignment="HorizontalAlignment.End">
                <FluentButton IconStart="@(new Icons.Regular.Size16.Broom())"
                              Disabled="loading"
                              OnClick="ClearFilters">
                    Clear
                </FluentButton>
                <FluentButton IconStart="@(new Icons.Regular.Size16.Search())"
                              Appearance="Appearance.Accent"
                              Loading="loading"
                              OnClick="DataGridRefreshDataAsync">
                    Search
                </FluentButton>
            </FluentStack>
        </FluentAccordionItem>
    </FluentAccordion>

    <!-- Tabela -->
    <FluentDataGrid @ref="dataGrid"
                    Items="@FilteredProjects"
                    OnRowDoubleClick="@(() => Console.WriteLine("Row double clicked!"))"
                    ItemSize="46"
                    GenerateHeader="GenerateHeaderOption.Sticky"
                    TGridItem="ProjectROI"
                    Loading="loading"
                    Pagination="pagination">
        <!-- Colunas da tabela -->
        <PropertyColumn Title="Id"
                        Property="@(c => c!.Id)"
                        Width="80px" />
        <PropertyColumn Title="Nome do Projeto"
                        Property="@(c => c!.ProjectName)"
                        Style="color: #af5f00"
                        Align="Align.Start" />
        <PropertyColumn Title="Orçamento"
                        Property="@(c => c!.ProjectBudget.ToString("C"))"
                        Align="Align.Center" />
        <PropertyColumn Title="Funcionários"
                        Property="@(c => c!.NumberOfEmployees)"
                        Tooltip="true"
                        Align="Align.Center" />
        <PropertyColumn Title="ROI"
                        Property="@(c => c!.ROI.ToString("0.00"))" Align="Align.Center" />

        <!-- Coluna de ações -->
        <TemplateColumn Title="Ações" Align="@Align.End">
            <FluentButton aria-label="Edit item"
                          IconEnd="@(new Icons.Regular.Size16.Edit())"
                          OnClick="@(() => UpdateProject(context))" />
            <FluentButton aria-label="Delete item"
                          IconEnd="@(new Icons.Regular.Size16.Delete())"
                          OnClick="@(() => DeleteProject(context))" />
        </TemplateColumn>
    </FluentDataGrid>

    <!-- Paginação vinculada ao estado da tabela -->
    <FluentPaginator State="@pagination" />

    <!-- Botão de cadastro fora da tabela, com estilo destacado -->
    <FluentButton Appearance="Appearance.Accent"
                  @onclick="RegisterProject">
        Cadastrar
    </FluentButton>
</FluentCard>

@code {
    FluentDataGrid<ProjectROI> dataGrid = default!;
    IQueryable<ProjectROI> projects = default!;
    bool loading = true;
    string? _projectName = string.Empty;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IDialogReference? _dialog;

    IQueryable<ProjectROI>? FilteredProjects => projects?.Where(x => x.ProjectName.Contains(_projectName!, StringComparison.CurrentCultureIgnoreCase));


    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        loading = true;
        await InvokeAsync(StateHasChanged);

        var response = await Http.GetFromJsonAsync<ProjectROI[]>("https://localhost:7288/api/roi");

        projects = response!.AsQueryable();
        await pagination.SetTotalItemCountAsync(response!.Length);

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    public void ClearFilters()
    {
        _projectName = string.Empty;
    }

    public async Task DataGridRefreshDataAsync()
    {
        await dataGrid.RefreshDataAsync(true);
    }

    private async Task RegisterProject()
    {
        ProjectROI projectROI = new()
            {

                StartDate = DateTime.Now,
                TotalHoursWorkedWeekly = 0,
                CompletedTraining = 0,
                EmployeesUsingNewTool = 0,
                TotalChangeImplementationTime = 0,
                TotalPlannedImplementationTime = 0,
                TotalProcesses = 0,
                CompliantProcesses = 0,
                ProjectEvaluationTotalResponses = 0,
                ProjectEvaluationPositiveResponses = 0,
                ProjectEvaluationSumOfAllScores = 0
            };

        _dialog = await DialogService.ShowPanelAsync<Cadastrar>(projectROI, new DialogParameters<ProjectROI>()
            {
                Content = projectROI,
                Alignment = HorizontalAlignment.Right,
                Title = $"Cadastrar Projeto",
                PrimaryAction = "Salvar",
                SecondaryAction = "Cancelar",
                Width = "400px"
            });

        DialogResult result = await _dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                var response = await Http.PostAsJsonAsync("https://localhost:7288/api/roi", projectROI);

                if (response.IsSuccessStatusCode)
                    ToastService.ShowSuccess($"O Projeto {projectROI.ProjectName} foi adicionado com sucesso!");
            }
            catch
            {
                ToastService.ShowWarning($"Falhou: O {projectROI.ProjectName} não foi cadastrado.");
            }
        }

        await LoadProjects();

    }

    private async Task UpdateProject(ProjectROI projectROI)
    {

        var dialog = await DialogService.ShowPanelAsync<Cadastrar>(projectROI, new DialogParameters<ProjectROI>()
            {
                Content = projectROI,
                Alignment = HorizontalAlignment.Right,
                Title = $"Cadastrar Projeto",
                PrimaryAction = "Salvar",
                SecondaryAction = "Cancelar",
                Width = "400px"
            });

        DialogResult result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                var response = await Http.PutAsJsonAsync($"https://localhost:7288/api/roi/{projectROI.Id}", projectROI);

                if (response.IsSuccessStatusCode)
                    ToastService.ShowSuccess($"O Projeto {projectROI.ProjectName} foi atualizado com sucesso!");
            }
            catch
            {
                ToastService.ShowWarning($"Falhou: O {projectROI.ProjectName} não foi atualizado.");
            }
        }

        await LoadProjects();
    }

    public async Task DeleteProject(ProjectROI project)
    {
        var dialogInstance = await DialogService.ShowDialogAsync(
    @<div>
        <FluentLabel>Tem certeza que deseja deletar o @project.ProjectName?</FluentLabel>
    </div>
    ,
     new()
     {
         Title = "Deletar Projeto",
         PrimaryAction = "Deletar",
         SecondaryAction = "Cancelar"
     });

        var result = await dialogInstance.Result;

        if (!result.Cancelled)
        {
            var response = await Http.DeleteAsync($"https://localhost:7288/api/roi/{project.Id}");

            var projectList = projects.ToList();

            var projectToDelete = projectList.FirstOrDefault(p => p.ProjectName == project.ProjectName);

            if (projectToDelete != null)
            {
                projectList.Remove(projectToDelete);
                projects = projectList.AsQueryable();
                ToastService.ShowInfo($"O Projeto {project.ProjectName} foi deletado com sucesso!");
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                ToastService.ShowWarning($"Falhou: O {project.ProjectName} não foi encontrado.");
            }
        }
    }
}
