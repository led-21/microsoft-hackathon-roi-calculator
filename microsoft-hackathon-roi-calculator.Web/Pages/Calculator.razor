@page "/calculator"
@using System.Globalization
@using System.Text.Json

@inject IToastService ToastService
@inject HttpClient Http
@inject MarkdownService Markdown

<FluentLabel Typo="Typography.H3">Calculadora de ROI</FluentLabel>

@if (isLoading)
{
    <FluentCard>
        <h3>
            <FluentSkeleton Shape="SkeletonShape.Rect"
            Width="150px"
            Height="20px" />
        </h3>
        <h3>
            <FluentSkeleton Shape="SkeletonShape.Rect"
            Width="100%"
            Height="400px" />
        </h3>
    </FluentCard>
}
else
{
    <FluentGrid>
        <FluentGridItem>
            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal">
                <FluentCard xs="12" Height="auto" style="padding: 20px; max-height: 725px; margin: 20px;">

                    <FluentTextField Label="Orçamento do Projeto (R$)"
                    @bind-Value="formattedBudget" />
                    <FluentNumberField Label="Número de Funcionários Impactados"
                    Type="number"
                    @bind-Value="inputParameters.NumberOfEmployees" />
                    <FluentNumberField Label="Duração do Projeto (meses)"
                    Type="number"
                    @bind-Value="inputParameters.ProjectDurationMonths" />
                    <FluentNumberField Label="Probabilidade de Falha (%)"
                    Type="number"
                    @bind-Value="@inputParameters.FailureRate"
                    @onclick="DetermineProbability" />
                    <p>@failPropability</p>

                    <FluentAccordion>
                        <FluentAccordionItem Heading="Outros Parametros de Cálculo">
                            <FluentIcon Value="@(new Icons.Regular.Size24.AddSquareMultiple())" Color="@Color.Neutral" Slot="start" />
                            <FluentNumberField Label="Percentual do Orçamento Perdido em Caso de Falha (%)"
                            Type="number"
                            @bind-Value="inputParameters.BudgetLossRate" />
                            <FluentNumberField Label="Perda por Desengajamento (%)"
                            Type="number"
                            @bind-Value="inputParameters.ExpectedDisengagementRate" />
                            <FluentNumberField Label="Ganho de Produtividade (%)"
                            Type="number"
                            @bind-Value="inputParameters.ExpectedProductivityGain" />
                            <FluentNumberField Label="Redução do Risco de Falha (%)"
                            Type="number"
                            @bind-Value="inputParameters.ProjectedRiskReduction" />
                            <FluentNumberField Label="Retorno no Sucesso (%)"
                            Type="number"
                            @bind-Value="inputParameters.ExpectedSuccessBenefit" />
                        </FluentAccordionItem>
                    </FluentAccordion>

                    <br />
                    <FluentButton OnClick="SubmitForm" Appearance="Appearance.Accent">Calcular</FluentButton>
                    <br />
                </FluentCard>

                <!-- Relatório de ROI do Projeto -->
                @if (!string.IsNullOrEmpty(Result))
                {
                    <FluentCard style="padding: 20px; margin: 20px; height: 725px; overflow-y: scroll;">
                        <p>@((MarkupString)Result)</p>
                    </FluentCard>
                }
            </FluentStack>

        </FluentGridItem>
    </FluentGrid>
}


@code {

    private bool isLoading = false;

    private static ROIInputParameters inputParameters = new ROIInputParameters();
    public static string Result = string.Empty;

    string failPropability = "";

    private async Task SubmitForm()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7288/api/roi/calculator", inputParameters);

            if (response.IsSuccessStatusCode)
                ToastService.ShowInfo($"Um relatorio detalhado será gerado por AI.");

            Result = Markdown.ConvertToHtml(await response.Content.ReadAsStringAsync());
            await InvokeAsync(StateHasChanged);

            Report.DetailReport = Result;

        }
        catch (Exception ex)
        {
            ToastService.ShowWarning($"Falhou ao calcular o projeto. " + ex.Message);
        }

        try
        {
            string functionUrl = "https://localhost:7288/api/roi/ai"; // http://localhost:7071/api/CalculateROI

            HttpContent httpContent = new StringContent(Result);

            var functionsResponse = await Http.PostAsync(functionUrl, httpContent);

            if (functionsResponse.IsSuccessStatusCode)
            {
                Report.DetailReport =  await functionsResponse.Content.ReadAsStringAsync();
                ToastService.ShowSuccess($"Relatorio criado com sucesso.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task DetermineProbability()
    {
        if (inputParameters?.ProjectBudget != null &&
            inputParameters?.NumberOfEmployees != null &&
            inputParameters?.ProjectDurationMonths != null)
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7288/api/roi/estimate/failure-rate", inputParameters);

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var failRate = await response.Content.ReadAsStringAsync();
                    failPropability = "Probabilidade de falha estimada pelo modelo de Machine Learning: " + failRate;
                }
                catch
                {
                    failPropability = "Não foi possivel estimada a probabilidade de falha pelo modelo de Machine Learning";
                }
            }
        }
    }

    private string formattedBudget
    {
        get => inputParameters.ProjectBudget.ToString("C", new System.Globalization.CultureInfo("pt-BR"));
        set
        {
            if (double.TryParse(value, System.Globalization.NumberStyles.Currency, new System.Globalization.CultureInfo("pt-BR"), out var result))
            {
                inputParameters.ProjectBudget = result;
            }
        }
    }
}