@page "/roi-calculator"
@using MudBlazor
@inject ROIApiService ApiService

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" GutterBottom="true">Calculadora de ROI</MudText>

    <MudTabs Elevation="1" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <!-- Tab 1: ROI -->
        <MudTabPanel Text="ROI">
            <MudForm @ref="roiForm" @bind-IsValid="@roiFormValid">
                <MudTextField @bind-Value="costBenefitMetrics.NetBenefit" Label="Benefício Líquido" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" Format="N2" />
                <MudTextField @bind-Value="costBenefitMetrics.CostOfInvestment" Label="Custo de Investimento" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" Format="N2" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="CalculateROIAsync" Disabled="@(!roiFormValid)">Calcular</MudButton>
            </MudForm>
            @if (roiResult.HasValue)
            {
                <MudText Class="mt-4">Resultado: @roiResult.Value.ToString("F2")%</MudText>
            }
        </MudTabPanel>

        <!-- Tab 2: Process Compliance -->
        <MudTabPanel Text="Conformidade de Processos">
            <MudForm @ref="processForm" @bind-IsValid="@processFormValid">
                <MudTextField @bind-Value="processMetrics.CompliantProcesses" Label="Processos Conformes" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                <MudTextField @bind-Value="processMetrics.TotalProcesses" Label="Total de Processos" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="CalculateProcessComplianceAsync" Disabled="@(!processFormValid)">Calcular</MudButton>
            </MudForm>
            @if (processResult.HasValue)
            {
                <MudText Class="mt-4">Resultado: @processResult.Value.ToString("F2")%</MudText>
            }
        </MudTabPanel>

        <!-- Tab 3: Training Completion -->
        <MudTabPanel Text="Taxa de Conclusão de Treinamento">
            <MudForm @ref="trainingForm" @bind-IsValid="@trainingFormValid">
                <MudTextField @bind-Value="trainingMetrics.CompletedTraining" Label="Treinamentos Concluídos" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                <MudTextField @bind-Value="trainingMetrics.EnrolledTraining" Label="Treinamentos Inscritos" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="CalculateTrainingCompletionAsync" Disabled="@(!trainingFormValid)">Calcular</MudButton>
            </MudForm>
            @if (trainingCompletionResult.HasValue)
            {
                <MudText Class="mt-4">Resultado: @trainingCompletionResult.Value.ToString("F2")%</MudText>
            }
        </MudTabPanel>

        <!-- Adicione mais abas para os outros cálculos conforme necessário -->
    </MudTabs>
</MudContainer>

@code {
    private MudForm? roiForm;
    private bool roiFormValid;
    private CostBenefitMetrics costBenefitMetrics = new();
    private decimal? roiResult;

    private MudForm? processForm;
    private bool processFormValid;
    private ProcessMetrics processMetrics = new();
    private decimal? processResult;

    private MudForm? trainingForm;
    private bool trainingFormValid;
    private TrainingMetrics trainingMetrics = new();
    private decimal? trainingCompletionResult;

    private async Task CalculateROIAsync()
    {
        roiResult = await ApiService.CalculateROI(costBenefitMetrics);
    }

    private async Task CalculateProcessComplianceAsync()
    {
        processResult = await ApiService.CalculateProcessComplianceRate(processMetrics);
    }

    private async Task CalculateTrainingCompletionAsync()
    {
        trainingCompletionResult = await ApiService.CalculateTrainingCompletionRate(trainingMetrics);
    }
}